import telebot
import database as db
import buttons as bt
import random
from telebot.types import Message, PhotoSize
from database import User, Admin, Group

bot = telebot.TeleBot('7475946417:AAHRiC_nf5wur28BVcVD6SlKI-lXDmlRO2U')


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user = User.user_log_in(user_id)
    if user:
        bot.send_message(user_id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç {user.user_name}',
                         reply_markup=bt.main_menu_bt(user_id))
    else:
        bot.send_message(user_id,
                         '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ç–∏–∫—É! \n\n'
                         '–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ III —ç—Ç–∞–ø–∞ —Ä–µ—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á \n'
                         '–í—ã –∑–∞—à–ª–∏ –≤–ø–µ—Ä–≤—ã–µ. –ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!')
        bot.send_message(user_id, '–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É',
                         reply_markup=bt.students_all_groups(Group.get_all_groups()))


@bot.message_handler(commands=['admin'])
def admin_log_in(message):
    admin_id = message.from_user.id
    bot.send_message(admin_id, '–ü–∞—Ä–æ–ª—å: ')
    bot.register_next_step_handler(message, admin_sign_in)


@bot.message_handler(content_types=['text'])
def user_main_menu(message):
    user_id = message.from_user.id
    if message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        info = Group.get_exact_student_id(user_id)
        bot.send_message(user_id, text=info, reply_markup=bt.main_menu_bt(user_id))
    elif message.text == '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç':
        main_menu(message)
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —ç—Ç–∞–ø—ã':
        if User.is_pro_user(user_id):
            bot.send_message(
                user_id,
                text=(
                    "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–†–û-—Ä–µ–∂–∏–º!* üöÄ\n\n"
                    "üíº *–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:* üìã\n\n"
                    "1. üìä *–†–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ –≥–∞–º–µ—Ç* ‚Äî\n"
                    "   _–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≥–∞–º–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–º–∞._ üß¨\n\n"
                    "2. üß¨ *–†–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ –≥–∏–±—Ä–∏–¥–æ–≤* ‚Äî\n"
                    "   _–í—ã—á–∏—Å–ª–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏–±—Ä–∏–¥–æ–≤ –ø—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏._ üî¢\n\n"
                    "3. üîç *–†–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≥–∏–±—Ä–∏–¥–æ–≤* ‚Äî\n"
                    "   _–ù–∞–π–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏–±—Ä–∏–¥–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≥–µ–Ω–æ—Ç–∏–ø–æ–º._ üéØ\n\n"
                    "4. üß© *–†–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–∏–±—Ä–∏–¥–æ–≤* ‚Äî\n"
                    "   _–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≥–∏–±—Ä–∏–¥—ã —Å –æ—Å–æ–±—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏._ üìà\n\n"
                    "5. üî¨ *–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ —Ñ–µ–Ω–æ—Ç–∏–ø—É* ‚Äî\n"
                    "   _–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ñ–µ–Ω–æ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ—Ç–æ–º–∫–æ–≤._ üìä\n\n"
                    "6. üìä *–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ –≥–µ–Ω–æ—Ç–∏–ø—É* ‚Äî\n"
                    "   _–†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –≥–µ–Ω–æ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è._ üß¨\n\n"
                    "üåü *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Å—Ç–∞–Ω—å—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–º!* üéì"
                ),
                reply_markup=bt.main_menu_bt_pro(),
                parse_mode="Markdown"
            )
        elif not User.is_pro_user(user_id):
            bot.send_message(user_id, '–ù–µ –∂—É–ª—å–Ω–∏—á–∞—Ç—å!')


@bot.callback_query_handler(lambda call: call.data in ['gametes_num', 'filio_all_num',
                                                       'filio_num', 'filio_some_num',
                                                       'segregation_fen', 'segregation_gen',
                                                       'change_pass', 'create_new_group',
                                                       'change_group_members', 'change_group_photo',
                                                       'del_group', 'upgrade_all_pro'])
def all_calls(call):
    user_id = call.message.chat.id
    if call.data == 'gametes_num':
        bot.delete_message(user_id, call.message.message_id)
        parent, hetero = db.random_parent()
        bot.send_message(
            user_id,
            text=(
                "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                "–ö–∞–∫–æ–≤–æ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∞–º–µ—Ç* –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Å –≥–µ–Ω–æ—Ç–∏–ø–æ–º:\n"
                f"`{parent}`\n\n"
                "_\\(–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞\\.\\)_ üî¢"
            ),
            parse_mode="MarkdownV2"
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        bot.register_next_step_handler(
            call.message,
            lambda msg: gametes_num(msg, hetero)
        )
    elif call.data == 'filio_all_num':
        bot.delete_message(user_id, call.message.message_id)
        parent_1, hetero_1, parent_2, hetero_2, number = db.random_parents(6, 8)
        answer = (2**hetero_1) * (2**hetero_2)
        bot.send_message(
            user_id,
            text=(
                "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                "–ö–∞–∫–æ–≤–æ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏–±—Ä–∏–¥–æ–≤ \\(–¥–µ—Ç–µ–π\\)*, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                f"‚ôÄÔ∏è *{parent_1}* \n"
                f"‚ôÇÔ∏è *{parent_2}* \n\n"
                "_\\(–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞\\.\\)_ üî¢"  # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–∫–æ–±–∫–∏ –∏ —Ç–æ—á–∫–∞
            ),
            parse_mode="MarkdownV2")
        bot.register_next_step_handler(call.message, lambda msg: filio_all_num(msg, answer))
    elif call.data == 'filio_num':
        bot.delete_message(user_id, call.message.message_id)
        answer, filio, parent_1, parent_2 = db.filio_nums()
        bot.send_message(user_id, text=(
            "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
            "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
            f"‚ôÄÔ∏è *{parent_1}* \n"
            f"‚ôÇÔ∏è *{parent_2}* \n\n"
            "–ù–∞–π–¥–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π* —Å –≥–µ–Ω–æ—Ç–∏–ø–æ–º:\n"
            f"`{filio}`"
        ), parse_mode="MarkdownV2")
        bot.register_next_step_handler(call.message, lambda msg: filio_num(msg, answer))
    elif call.data == 'filio_some_num':
        bot.delete_message(user_id, call.message.message_id)
        random_filio_some_num = random.choice(
            ['–¥–µ—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –≥–æ–º–æ–∑–∏–≥–æ—Ç–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏', '–¥–µ—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏'])
        if random_filio_some_num == '–¥–µ—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –≥–æ–º–æ–∑–∏–≥–æ—Ç–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏':
            result, parent_1, parent_2 = db.test4_1()
            bot.send_message(user_id, text=(
                "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                f"‚ôÄÔ∏è *{parent_1}* \n"
                f"‚ôÇÔ∏è *{parent_2}* \n\n"
                "–ù–∞–π–¥–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–µ—Ç–µ–π*, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é:\n"
                f"*{random_filio_some_num}*"
            ), parse_mode="MarkdownV2")
            bot.register_next_step_handler(call.message, lambda msg: filio_some_nums(msg, result, random_filio_some_num))
        elif random_filio_some_num == '–¥–µ—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏':
            result, parent_1, parent_2 = db.test4_2()
            bot.send_message(user_id, text=(
                "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                f"‚ôÄÔ∏è *{parent_1}* \n"
                f"‚ôÇÔ∏è *{parent_2}* \n\n"
                "–ù–∞–π–¥–∏—Ç–µ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–µ—Ç–µ–π*, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é:\n"
                f"*{random_filio_some_num}*"
            ), parse_mode="MarkdownV2")
            bot.register_next_step_handler(call.message,
                                           lambda msg: filio_some_nums(msg, result, random_filio_some_num))
    elif call.data == 'segregation_fen':
        bot.delete_message(user_id, call.message.message_id)
        parent_1, parent_2, *result = db.segregation_fen()
        bot.send_message(user_id, text=(
            "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
            "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
            f"‚ôÄÔ∏è *{parent_1}* \n"
            f"‚ôÇÔ∏è *{parent_2}* \n\n"
            "–ù–∞–π–¥–∏—Ç–µ *—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–µ–Ω–æ—Ç–∏–ø–æ–≤* –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤\\.\n\n"
            "üìä *–û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `9\\:3\\:3\\:1`"
        ), parse_mode="MarkdownV2")
        bot.register_next_step_handler(call.message, lambda msg: segregation_fen(msg, result))
    elif call.data == 'segregation_gen':
        bot.delete_message(user_id, call.message.message_id)
        parent_1, parent_2, result = db.segregation_gen()
        bot.send_message(user_id, text=(
            "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
            "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
            f"‚ôÄÔ∏è *{parent_1}* \n"
            f"‚ôÇÔ∏è *{parent_2}* \n\n"
            "–ù–∞–π–¥–∏—Ç–µ *—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ–Ω–æ—Ç–∏–ø–æ–≤* –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤\\.\n\n"
            "üìä *–û—Ç–≤–µ—Ç –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `1\\:2\\:1\\:2\\:4\\:2\\:1\\:2\\:1`"
        ), parse_mode="MarkdownV2")
        bot.register_next_step_handler(call.message, lambda msg: segregation_gen(msg, result))
    elif call.data == 'change_pass':
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å: ')
        bot.register_next_step_handler(call.message, admin_change_password)
    elif call.data == 'create_new_group':
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã: ')
        bot.register_next_step_handler(call.message, get_group_name)
    elif call.data == 'upgrade_all_pro':
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, '–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
        Admin.upgrade_all_pro_status()
    elif call.data == 'del_group':
        bot.delete_message(user_id, call.message.message_id)
        groups = Group.get_all_groups()
        bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–¥–∞–ª–∏—Ç—å: ',
                         reply_markup=bt.all_groups(groups))
    elif call.data == 'change_group_members':
        bot.delete_message(user_id, call.message.message_id)
        groups = Group.get_all_groups()
        bot.send_message(call.message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å: ",
                         reply_markup=bt.all_groups(groups))
    elif call.data == 'change_group_complete':
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. \n'
                                  '–ß—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?', reply_markup=bt.admin_main_menu_bt())
    elif call.data == 'OK':
        bot.delete_message(user_id, call.message.message_id)
        bot.send_message(user_id, '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. \n'
                                  '–ß—Ç–æ–±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?', reply_markup=bt.admin_main_menu_bt())
    elif call.data == 'change_group_photo':
        bot.delete_message(user_id, call.message.message_id)



@bot.callback_query_handler(lambda call: 'delete_gr_' in call.data)
def delete_groups(call):
    user_id = call.message.chat.id
    group_id = int(call.data.replace('delete_gr_', ''))
    Admin.delete_group(group_id)
    groups = Group.get_all_groups()
    try:
        bot.edit_message_reply_markup(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=bt.all_groups(groups)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(call.message.chat.id, '–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –æ–±–Ω–æ–≤–ª–µ–Ω.', reply_markup=bt.all_groups(groups))


@bot.callback_query_handler(lambda call: 'student_exact_group_' in call.data)
def student_add(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    group_id = int(call.data.replace('student_exact_group_', ''))
    all_members = Group.get_all_students(group_id)
    print(all_members)
    bot.send_message(user_id, '–ù–∞–π–¥–∏—Ç–µ —Å–µ–±—è', reply_markup=bt.student_group_members(all_members))


@bot.callback_query_handler(lambda call: 'exact_group_' in call.data)
def change_members(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    group_id = int(call.data.replace('exact_group_', ''))
    all_members = Group.get_all_students(group_id)
    bot.send_message(user_id, '–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, '
                              '–ª–∏–±–æ —É–¥–∞–ª–∏—Ç–µ —á–µ—Ä–µ–∑ "‚ùå" —Ç–µ—Ö, '
                              '–∫–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –≥—Ä—É–ø–ø—ã. \n'
                              '–ï—Å–ª–∏ –Ω–µ–∫–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å, –Ω–∞–∂–º–∏—Ç–µ "–ì–æ—Ç–æ–≤–æ"', reply_markup=bt.group_members(all_members, group_id))
    bot.register_next_step_handler(call.message, add_members, group_id)


def add_members(message, group_id):
    user_id = message.from_user.id
    new_members = [name.strip() for name in message.text.split(',')]
    current_members = Group.get_all_students(group_id) or []
    merge_students = list(set(current_members + new_members))
    Admin.change_group_members(group_id, merge_students)
    bot.send_message(
        user_id,
        'üìã *–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω!* üéâ\n\n'
        'üìù *–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã:*\n'
        f"`{', '.join(merge_students)}`\n\n"
        '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ—â—ë —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:',
        parse_mode='Markdown',
        reply_markup=bt.group_members(merge_students, group_id)  # –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    )


@bot.callback_query_handler(lambda call: 'delete_' in call.data)
def delete_member(call):
    user_id = call.message.chat.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏ group_id –∏–∑ callback_data
    data = call.data.replace('delete_', '').split('_')
    student_name = '_'.join(data[:-1]).strip()  # –í–¥—Ä—É–≥ –≤ –∏–º–µ–Ω–∏ –µ—Å—Ç—å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    group_id = int(data[-1])  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî group_id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(user_id, call.message.message_id)

    # –ò—â–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    student = db.get_exact_student(student_name)
    if not student:
        bot.send_message(user_id, f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{student_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≥—Ä—É–ø–ø–µ!')
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
    Admin.remove_student_from_group(group_id, student['user_id'])

    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    all_students = Group.get_all_students(group_id)
    bot.send_message(
        user_id,
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ '{student_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –≥—Ä—É–ø–ø—ã!\n\n"
        "üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=bt.group_members(all_students, group_id)
    )

@bot.callback_query_handler(lambda call: call.data.startswith('group_') and call.data.replace('group_', '').isdigit())
def groups_call_data(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º group_id –≤ —á–∏—Å–ª–æ
    group_id = int(call.data.replace('group_', ''))
    group_info = Group.get_exact_group(group_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
    if group_info and group_info['group_photo']:
        with open('group_photo.jpg', 'wb') as file:
            file.write(group_info['group_photo'])
        with open('group_photo.jpg', 'rb') as photo:
            bot.send_photo(
                user_id,
                photo=photo,
                caption=f"–ì—Ä—É–ø–ø–∞: {group_info['group_name']}\n–°—Ç—É–¥–µ–Ω—Ç—ã: {', '.join(group_info['all_students'])}"
            )
    else:
        bot.send_message(
            user_id,
            f"–ì—Ä—É–ø–ø–∞: {group_info['group_name']}\n–°—Ç—É–¥–µ–Ω—Ç—ã: {', '.join(group_info['all_students'])}"
        )


@bot.callback_query_handler(lambda call: call.data == 'change_group_complete')
def handle_change_complete(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    bot.send_message(user_id, "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


def admin_sign_in(message):
    admin_id = message.from_user.id
    password = message.text
    admin = Admin.admin_log_in(admin_id, password)
    if admin:
        bot.send_message(admin_id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç {admin.admin_name}',
                         reply_markup=bt.admin_main_menu_bt())
    else:
        bot.send_message(admin_id, f'–ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
        bot.register_next_step_handler(message, admin_sign_in)


@bot.message_handler(content_types=['photo'])
def handle_photo(message: Message):
    user_id = message.from_user.id
    photo: PhotoSize = message.photo[-1]
    file_info = bot.get_file(photo.file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    photo_path = f'{user_id}_photo.jpg'
    with open(photo_path, 'wb') as file:
        file.write(downloaded_file)
    with open(photo_path, 'rb') as file:
        photo_data = file.read()
    User.change_photo(user_id, photo_data)
    bot.send_message(user_id, "–í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")


def get_name(message, group_id):
    user_id = message.from_user.id
    bot.send_message(user_id, '–ù–∞–π–¥–∏—Ç–µ —Å–µ–±—è:', reply_markup=bt.names(Group.get_all_students(group_id)))


@bot.callback_query_handler(lambda call: 'name_' in call.data)
def name_call_data(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    user_name = call.data.replace('name_', '')
    bot.send_message(user_id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ –≤ –≤–∞—à–µ–º –º–µ–Ω—é üìã.', reply_markup=bt.phone())
    bot.register_next_step_handler(call.message, get_number, user_name)


def get_number(message, user_name):
    user_id = message.from_user.id
    if message.contact:
        user_number = message.contact.phone_number
        bot.send_message(user_id, '–û—Ç–ª–∏—á–Ω–æ. –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω')
        user = User.user_sign_in(user_id, user_name, user_number)
        if user:
            bot.send_message(user_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. '
                                      '–ü–æ—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏', reply_markup=bt.main_menu_bt(user_id))
        else:
            bot.send_message(user_id, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ê–ª–µ–∫—Å–µ—é –ù–∏–∫–æ–ª–∞–µ–≤–∏—á—É')
        student_info = db.get_exact_student(user_name)
        if student_info:
            if student_info['user_photo']:
                with open('temp_photo.jpg', 'wb') as file:
                    file.write(student_info['user_photo'])
                with open('temp_photo.jpg', 'rb') as photo:
                    bot.send_photo(user_id, photo=photo, caption=(
                        f"–ò–º—è: {student_info['user_name']}\n"
                        f"–ù–æ–º–µ—Ä: {student_info['user_number']}\n"
                        f"Pro —Å—Ç–∞—Ç—É—Å: {'–î–∞' if student_info['pro_status'] else '–ù–µ—Ç'}\n"
                        f"–ü—Ä–æ–π–¥–µ–Ω–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤: {student_info['exam_pass']}"
                    ))
            else:
                bot.send_message(user_id, (
                    f"–ò–º—è: {student_info['user_name']}\n"
                    f"–ù–æ–º–µ—Ä: {student_info['user_number']}\n"
                    f"Pro —Å—Ç–∞—Ç—É—Å: {'–î–∞' if student_info['pro_status'] else '–ù–µ—Ç'}\n"
                    f"–ü—Ä–æ–π–¥–µ–Ω–æ —ç–∫–∑–∞–º–µ–Ω–æ–≤: {student_info['exam_pass']}"
                ))
        else:
            bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        bot.send_message(user_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ –≤ –≤–∞—à–µ–º –º–µ–Ω—é üìã.',
                         reply_markup=bt.phone())
        bot.register_next_step_handler(message, get_number, user_name)


def admin_change_password(message):
    admin_id = message.from_user.id
    password = message.text
    admin = Admin.admin_log_in(admin_id, password)
    if admin:
        bot.send_message(admin_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ä—ã–π: ')
        bot.register_next_step_handler(message, admin_change_password_complete, admin)
    else:
        bot.send_message(admin_id, '–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.\n'
                                   '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å.')
        bot.register_next_step_handler(message, admin_log_in)


def admin_change_password_complete(message, admin):
    admin_id = message.from_user.id
    new_password = message.text
    Admin.change_password(admin, new_password)
    bot.send_message(admin_id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à –ø–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')


def get_group_name(message):
    admin_id = message.from_user.id
    group_name = message.text.strip()
    if group_name:
        bot.send_message(
            admin_id,
            text=(
                "üìù *–®–∞–≥ 1 –∏–∑ 2:* –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.\n\n"
                f"‚úÖ *–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:* `{group_name}` –¥–æ–±–∞–≤–ª–µ–Ω–æ! üè´\n\n"
                "üë• *–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:* \n"
                "_–í–≤–µ–¥–∏—Ç–µ –∏—Ö –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é._"
            ),
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(message, get_all_students, group_name)


def get_all_students(message, group_name):
    admin_id = message.from_user.id
    student_list = [name.strip() for name in message.text.strip().split(',')]
    if not student_list or student_list == ['']:
        bot.send_message(
            admin_id,
            text="‚ùå *–û—à–∏–±–∫–∞:* –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç–æ–π! üòû\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â—ë —Ä–∞–∑.",
            parse_mode="Markdown"
        )
        return

    # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É
    group = Admin.create_new_group(group_name, student_list)

    # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    if group:
        bot.send_message(
            admin_id,
            text=(
                f"üéâ *–ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!* üè´\n\n"
                f"üìö *–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:* `{group_name}`\n"
                f"üë• *–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:* {', '.join(student_list)}\n\n"
                "üíº *–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?*"
            ),
            parse_mode="Markdown",
            reply_markup=bt.admin_main_menu_bt()
        )
    # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    else:
        bot.send_message(
            admin_id,
            text="‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã!* üòû\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            parse_mode="Markdown"
        )


def main_menu(message):
    user_id = message.from_user.id
    user = User.user_log_in(user_id)
    bot.send_message(
        user_id,
        text=
            "üöÄ *–ù–∞—á–Ω–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–µ—Ä–≤–æ–≥–æ —ç—Ç–∞–ø–∞!* üß¨\n\n"
            "üìå *–¢–µ–º–∞:* _–†–∞—Å—á—ë—Ç —á–∏—Å–ª–∞ –≥–∞–º–µ—Ç._ üî¢\n"
            "üéì –ì–æ—Ç–æ–≤—ã? –¢–æ–≥–¥–∞ –Ω–∞—á–Ω—ë–º!",
        parse_mode="Markdown",
        reply_markup=bt.test_buttons(user, ('–†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –≥–∞–º–µ—Ç', 'gametes_num'))
    )


def gametes_num(message, hetero, count=1, correct_answer=0):
    user_id = message.from_user.id
    user_answer = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if int(user_answer) == 2 ** hetero:
            correct_answer += 1
            if count < 5:
                bot.send_message(
                    user_id,
                    text=
                    "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
                    f"üìä *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É {count + 1} –∏–∑ 5.*",
                    parse_mode="Markdown"
                )
            else:
                pass
        else:
            bot.send_message(
                user_id,
                text=
                    f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
                    f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* *{2 ** hetero}* üéØ\n\n"
                    "üìä *–°–æ–≤–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏:*\n"
                    "1. *–ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç.* üß¨\n"
                    "2. *–í–æ–∑–≤–µ–¥–∏—Ç–µ 2 –≤ –∏—Ö —Å—Ç–µ–ø–µ–Ω—å.* ‚úñÔ∏è\n\n"
                    "_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!_ üîÑ",
                parse_mode="Markdown"
            )

        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        if count < 5:
            parent, hetero = db.random_parent()
            bot.send_message(
                user_id,
                text=
                    "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                    "–ö–∞–∫–æ–≤–æ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∞–º–µ—Ç* –æ—Ä–≥–∞–Ω–∏–∑–º–∞ —Å –≥–µ–Ω–æ—Ç–∏–ø–æ–º:\n"
                    f"`{parent}`\n\n"
                    "_(–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.)_ üî¢\n\n"
                    f"‚û°Ô∏è *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É {count + 1} –∏–∑ 5.*",
                parse_mode="Markdown"
            )
            bot.register_next_step_handler(
                message,
                lambda msg: gametes_num(msg, hetero, count + 1, correct_answer)
            )
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            bot.send_message(
                user_id,
                text=
                    "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéì\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* *{correct_answer}* *–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ 5.*",
                parse_mode="Markdown"
            )
            user = User.user_log_in(user_id)

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            if correct_answer == 5:
                bot.send_message(
                    user_id,
                    text=
                        "üåü *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n\n"
                        "–í—ã –Ω–∞–±—Ä–∞–ª–∏ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª!* üèÜ\n"
                        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ *—Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.* üöÄ",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(user, ('–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –¥–µ—Ç–µ–π', 'filio_all_num')))
            else:
                bot.send_message(
                    user_id,
                    text=
                        "‚ùå *–≠—Ç–∞–ø –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.* üòû\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã *–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.* ‚¨áÔ∏è",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(user, ('–†–∞—Å—á–µ—Ç —á–∏—Å–ª–∞ –≥–∞–º–µ—Ç', 'gametes_num'))
                )
    except ValueError:
        bot.send_message(
            user_id,
            text="‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!* üòû\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! üî¢",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(message, lambda msg: gametes_num(msg, hetero, count, correct_answer))


def filio_all_num(message, answer, count=1, correct_answer=0):
    user_id = message.from_user.id
    user_answer = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    print(user_answer)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if int(user_answer) == answer:
            correct_answer += 1
            if count < 5:
                bot.send_message(
                    user_id,
                    text=
                        "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
                        f"üìä *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É {count + 1} –∏–∑ 5.*",
                    parse_mode="Markdown"
                )
            else:
                pass
        else:
            bot.send_message(
                user_id,
                text=
                    f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!*\n\n"
                    f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* `{answer}` üéØ\n\n"
                    "üìä *–°–æ–≤–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏:*\n"
                    "1. *–ü–æ—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç –∫–∞–∂–¥–æ–≥–æ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª–µ–π.* üë©‚Äçüî¨üë®‚Äçüî¨\n"
                    "2. *–í–æ–∑–≤–µ–¥–∏—Ç–µ 2 –≤ —Å—Ç–µ–ø–µ–Ω—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç—Ç–∏—Ö –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç.* ‚úñÔ∏è\n\n"
                    "_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!_ üîÑ",
                parse_mode="Markdown"
            )

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if count < 5:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
            parent_1, hetero_1, parent_2, hetero_2, number = db.random_parents(6, 8)
            answer = (2 ** hetero_1) * (2 ** hetero_2)

            bot.send_message(
                user_id,
                text=
                    "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                    "–ö–∞–∫–æ–≤–æ *–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–∏–±—Ä–∏–¥–æ–≤ (–¥–µ—Ç–µ–π)*, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                    f"‚ôÄÔ∏è *{parent_1}* \n"
                    f"‚ôÇÔ∏è *{parent_2}* \n\n"
                    "_(–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞.)_ üî¢",
                parse_mode="Markdown"
            )

            bot.register_next_step_handler(
                message,
                lambda msg: filio_all_num(msg, answer, count + 1, correct_answer)
            )

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
        else:
            bot.send_message(
                user_id,
                text=
                    "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéì\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* `{correct_answer}` *–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ 5.*",
                parse_mode="Markdown"
            )

            user = User.user_log_in(user_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
            if correct_answer == 5:
                bot.send_message(
                    user_id,
                    text=
                        "üåü *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n\n"
                        "–í—ã –Ω–∞–±—Ä–∞–ª–∏ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª!* üèÜ\n"
                        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ *—Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.* üöÄ",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–µ–π', 'filio_num')
                    )
                )
            else:
                bot.send_message(
                    user_id,
                    text=
                        "‚ùå *–≠—Ç–∞–ø –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.* üòû\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã *–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.* ‚¨áÔ∏è",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Å–µ—Ö –¥–µ—Ç–µ–π', 'filio_all_num')
                    )
                )
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        bot.send_message(
            user_id,
            text="‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!* üòû\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! üî¢",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(
            message,
            lambda msg: filio_all_num(msg, answer, count, correct_answer)
        )


def filio_num(message, answer, count=1, correct_answer=0):
    user_id = message.from_user.id
    user_answer = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if int(user_answer) == answer:
            correct_answer += 1
            if count < 5:
                bot.send_message(
                    user_id,
                    text=
                        "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
                        f"üìä *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É {count + 1} –∏–∑ 5.*",
                    parse_mode="Markdown"
                )
            else:
                pass
        else:
            # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            bot.send_message(
                user_id,
                text=
                    f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!* üòû\n\n"
                    f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* `{answer}` üéØ\n\n"
                    "üìä *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Ä–∞—Å—á—ë—Ç—É:*\n"
                    "1. *–ù–∞–π–¥–∏—Ç–µ —Ç–∞–∫–∏–µ –ø–∞—Ä—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç–∞–º–∏ —É –æ–±–æ–∏—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Ä–µ–±–µ–Ω–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.* üß¨\n"
                    "2. *–ü–µ—Ä–µ–º–Ω–æ–∂—å—Ç–µ 2 —Å–∞–º—É –Ω–∞ —Å–µ–±—è —Å—Ç–æ–ª—å–∫–æ –∂–µ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –Ω–∞—à–ª–∏ —Ç–∞–∫–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π.* ‚úñÔ∏è\n\n"
                    "üìå *–ü—Ä–∏–º–µ—Ä:*\n\n"
                    "_–†–æ–¥–∏—Ç–µ–ª–∏:_ *–ê–∞Bb √ó AaBb*\n\n"
                    "_–†–µ–±–µ–Ω–æ–∫:_ *Aabb*\n\n"
                    "- –£ –≤—Å–µ—Ö —Ç—Ä–æ–∏—Ö –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫—É –ê.*\n"
                    "- –†–∞—Å—á–µ—Ç: 2 –¥–µ—Ç–µ–π*\n\n"
                    "_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!_ üîÑ",
                parse_mode="Markdown"
            )

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if count < 5:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            filio_real_num, filio, parent_1, parent_2 = db.filio_nums()
            bot.send_message(
                user_id,
                text=
                    "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                    "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                    f"‚ôÄÔ∏è *{parent_1}* \n"
                    f"‚ôÇÔ∏è *{parent_2}* \n\n"
                    f"–ù–∞–π–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π —Å –≥–µ–Ω–æ—Ç–∏–ø–æ–º:\n"
                    f"`{filio}`",
                parse_mode="Markdown"
            )

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            bot.register_next_step_handler(
                message,
                lambda msg: filio_num(msg, filio_real_num, count + 1, correct_answer)
            )
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            bot.send_message(
                user_id,
                text=
                    "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéì\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* `{correct_answer}` *–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ 5.*",
                parse_mode="Markdown"
            )

            user = User.user_log_in(user_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
            if correct_answer == 5:
                bot.send_message(
                    user_id,
                    text=
                        "üåü *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n\n"
                        "–í—ã –Ω–∞–±—Ä–∞–ª–∏ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª!* üèÜ\n"
                        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ *—Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.* üöÄ",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–µ–π', 'filio_some_num')
                    )
                )
            else:
                bot.send_message(
                    user_id,
                    text=
                        "‚ùå *–≠—Ç–∞–ø –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.* üòû\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã *–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.* ‚¨áÔ∏è",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–µ–π', 'filio_num')
                    )
                )
    except ValueError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤–≤–æ–¥–µ
        bot.send_message(
            user_id,
            text="‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!* üòû\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! üî¢",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(
            message,
            lambda msg: filio_num(msg, answer, count, correct_answer)
        )


def filio_some_nums(message, result, random_filio_some_num, count=1, correct_answer=0):
    user_id = message.from_user.id
    user_answer = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    try:
        if int(user_answer) == result:
            correct_answer += 1
            if count < 5:
                bot.send_message(
                    user_id,
                    text=
                        "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
                        f"üìä *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É {count + 1} –∏–∑ 5.*",
                    parse_mode="Markdown"
                )
            else:
                pass
        else:
            bot.send_message(
                user_id,
                text=
                    f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!* üòû\n\n"
                    f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* `{result}` üéØ\n\n"
                    "üìä *–°–æ–≤–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:*\n"
                    "1. *–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∫–∞–∂–¥—É—é –ø–∞—Ä—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ.* üß¨\n"
                    "2. *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–æ–º–æ- –∏–ª–∏ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç—ã:* üßê\n"
                    "   - –ï—Å–ª–∏ –≤ –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.\n\n"
                    "3. *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–∫–æ–Ω—ã –ú–µ–Ω–¥–µ–ª—è:*\n"
                    "   - *2-–π –∑–∞–∫–æ–Ω –ú–µ–Ω–¥–µ–ª—è:*\n"
                    "     - –ò—â–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω—ã –≥–æ–º–æ- –∏ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç—ã. *–°—Ç–∞–≤—å—Ç–µ 2.*\n"
                    "   - *1-–π –∑–∞–∫–æ–Ω –ú–µ–Ω–¥–µ–ª—è:*\n"
                    "     - –ï—Å–ª–∏ –≤—Å–µ –ø–æ—Ç–æ–º–∫–∏ ‚Äî –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç—ã, *—Å—Ç–∞–≤—å—Ç–µ 0.*\n\n"
                    "üìå *–ü—Ä–∏–º–µ—Ä:*\n\n"
                    "_–†–æ–¥–∏—Ç–µ–ª–∏:_ *–ê–∞BB √ó –ê–∞–≤–≤*\n\n"
                    "- *–ü—Ä–∏–∑–Ω–∞–∫ A:*  –í–æ–∑–º–æ–∂–Ω–∞ –≥–æ–º–æ- –∏ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç–∞ (–ê–∞). *–°—Ç–∞–≤–∏–º 2.*\n"
                    "- *–ü—Ä–∏–∑–Ω–∞–∫ B:*  –í—Å–µ –ø–æ—Ç–æ–º–∫–∏ ‚Äî –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç—ã (Bb). *–°—Ç–∞–≤–∏–º 0.*\n\n"
                    "*–†–µ–∑—É–ª—å—Ç–∞—Ç:* –û—Ç–≤–µ—Ç = _2 √ó 0 = 0 –¥–µ—Ç–µ–π_ üî¢",
                parse_mode="Markdown")
        if count < 5:
            random_filio_some_num = random.choice(
                ['–¥–µ—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –≥–æ–º–æ–∑–∏–≥–æ—Ç–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏', '–¥–µ—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –≥–µ—Ç–µ—Ä–æ–∑–∏–≥–æ—Ç–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏']
            )

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å–ª–æ–≤–∏—è
            if random_filio_some_num == '–¥–µ—Ç–∏ —Å–æ –≤—Å–µ–º–∏ –≥–æ–º–æ–∑–∏–≥–æ—Ç–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏':
                result, parent_1, parent_2 = db.test4_1()
            else:
                result, parent_1, parent_2 = db.test4_2()

            # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            bot.send_message(
                user_id,
                text=
                    "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                    "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                    f"‚ôÄÔ∏è *{parent_1}* \n"
                    f"‚ôÇÔ∏è *{parent_2}* \n\n"
                    f"–ù–∞–π–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –¥–µ—Ç–µ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é:\n"
                    f"*{random_filio_some_num}*",
                parse_mode="Markdown"
            )

            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            bot.register_next_step_handler(
                message,
                lambda msg: filio_some_nums(
                    msg, result, random_filio_some_num, count + 1, correct_answer
                )
            )
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            bot.send_message(
                user_id,
                text=
                    "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéì\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* `{correct_answer}` *–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ 5.*",
                parse_mode="Markdown"
            )

            user = User.user_log_in(user_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if correct_answer == 5:
                bot.send_message(
                    user_id,
                    text=
                        "üåü *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n\n"
                        "–í—ã –Ω–∞–±—Ä–∞–ª–∏ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª!* üèÜ\n"
                        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ *—Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.* üöÄ",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ –ø–æ —Ñ–µ–Ω–æ—Ç–∏–ø—É', 'segregation_fen')
                    )
                )
            else:
                bot.send_message(
                    user_id,
                    text=
                        "‚ùå *–≠—Ç–∞–ø –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.* üòû\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã *–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.* ‚¨áÔ∏è",
                    parse_mode="Markdown",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ—Ç–µ–π', 'filio_some_num')
                    )
                )
    except ValueError:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        bot.send_message(
            user_id,
            text=
                "‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!* üòû\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ! üî¢",
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(
            message,
            lambda msg: filio_some_nums(
                msg, result, random_filio_some_num, count, correct_answer
            )
        )


def segregation_fen(message, result, count=1, correct_answer=0):
    user_id = message.from_user.id
    user_answer = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    formatted_result = ':'.join(result) if isinstance(result, list) else result
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        if user_answer == formatted_result:
            correct_answer += 1
            if count < 5:
                bot.send_message(
                    user_id,
                    text=
                        "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
                        f"üìä *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É {count + 1} –∏–∑ 5.*",
                    parse_mode="Markdown"
                )
            else:
                pass
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            bot.send_message(
                user_id,
                text=
                    f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!* üòû\n\n"
                    f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* `{formatted_result}` üéØ\n\n"
                    "üìù *–°–æ–≤–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏:*\n"
                    "1. –í–æ–∑—å–º–∏—Ç–µ *—Ä—É—á–∫—É –∏ —Ç–µ—Ç—Ä–∞–¥—å*. ‚úèÔ∏èüìí\n"
                    "2. *–†–∞—Å–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—ã–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥:*\n"
                    "   - –í—ã–±–∏—Ä–∞–π—Ç–µ –ø–æ *1 –ø–∞—Ä–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤* –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±–∏–∫–∞. üß¨\n"
                    "   - –ü—Ä–∏ —Å–æ–≤–º–µ—â–µ–Ω–∏–∏ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä *–ø–µ—Ä–µ–º–Ω–æ–∂—å—Ç–µ —á–∏—Å–ª–∞* —Å–ª–µ–≤–∞ –æ—Ç –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã. ‚úñÔ∏è\n"
                    "3. *–ü–µ—Ä–µ–±–µ—Ä–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è.* üîÑ\n\n"
                    "üìä *–û—Ç–≤–µ—Ç —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `9:3:3:1`",
                parse_mode="Markdown"
            )

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if int(count) < 5:
            parent_1, parent_2, result = db.segregation_fen()
            bot.send_message(
                user_id,
                text=(
                    "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                    "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                    f"‚ôÄÔ∏è *{parent_1}* \n"
                    f"‚ôÇÔ∏è *{parent_2}* \n\n"
                    "–ù–∞–π–¥–∏—Ç–µ *—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–µ–Ω–æ—Ç–∏–ø–æ–≤* –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤.\n\n"
                    "üìä *–û—Ç–≤–µ—Ç —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `9:3:3:1`"),
                parse_mode="Markdown"
            )
            bot.register_next_step_handler(
                message,
                lambda msg: segregation_fen(msg, result, count + 1, correct_answer)
            )
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            bot.send_message(
                user_id,
                text=(
                    "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéì\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* `{correct_answer}` *–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ 5.*"),
                parse_mode="Markdown"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            user = User.user_log_in(user_id)
            if correct_answer == 5:
                bot.send_message(
                    user_id,
                    text=
                        "üåü *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n\n"
                        "–í—ã –Ω–∞–±—Ä–∞–ª–∏ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª!* üèÜ\n"
                        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ *—Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.* üöÄ",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ –ø–æ –≥–µ–Ω–æ—Ç–∏–ø—É', 'segregation_gen')
                    ),
                    parse_mode="Markdown"
                )
            else:
                bot.send_message(
                    user_id,
                    text=
                        "‚ùå *–≠—Ç–∞–ø –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.* üòû\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã *–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.* ‚¨áÔ∏è",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ –ø–æ —Ñ–µ–Ω–æ—Ç–∏–ø—É', 'segregation_fen')
                    ),
                    parse_mode="Markdown"
                )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞
    except ValueError:
        bot.send_message(
            user_id,
            text=(
                "‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞\\!* üòû\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *9\\:3\\:3\\:1* üî¢"),
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(
            message,
            lambda msg: segregation_fen(msg, result, count, correct_answer)
        )


def segregation_gen(message, result, count=1, correct_answer=0):
    user_id = message.from_user.id
    user_answer = message.text.strip()  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if user_answer == result:
            correct_answer += 1
            if count < 5:
                bot.send_message(
                    user_id,
                    text=
                        "‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω–æ!* üéâ\n\n"
                        f"üìä *–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É {count + 1} –∏–∑ 5.*",
                    parse_mode="Markdown"
                )
            else:
                pass
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            bot.send_message(
                user_id,
                text=(
                    f"‚ùå *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!* üòû\n\n"
                    f"‚úÖ *–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:* `{result}` üéØ\n\n"
                    "üìù *–°–æ–≤–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á–∏:*\n"
                    "1\\. –í–æ–∑—å–º–∏—Ç–µ *—Ä—É—á–∫—É –∏ —Ç–µ—Ç—Ä–∞–¥—å* ‚úèÔ∏èüìí\n"
                    "2\\. *–†–∞—Å–ø–∏—à–∏—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∞–ª–ª–µ–ª–µ–π –ø–æ –≥–µ–Ω–æ—Ç–∏–ø–∞–º* üß¨\n"
                    "3\\. *–ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏–π* üîÑ\n\n"
                    "üìä *–û—Ç–≤–µ—Ç —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `1:2:1:2:4:2:1:2:1`"),
                parse_mode="Markdown"
            )

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if count < 5:
            parent_1, parent_2, result = db.segregation_gen()
            bot.send_message(
                user_id,
                text=(
                    "üìä *–ó–∞–¥–∞—á–∞:*\n\n"
                    "–ü—Ä–∏ —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏–∏:\n\n"
                    f"‚ôÄÔ∏è *{parent_1}* \n"
                    f"‚ôÇÔ∏è *{parent_2}* \n\n"
                    "–ù–∞–π–¥–∏—Ç–µ *—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –≤—Å–µ—Ö –≥–µ–Ω–æ—Ç–∏–ø–æ–≤* –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–º–æ–≤.\n\n"
                    "üìä *–û—Ç–≤–µ—Ç —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:* `1:2:1:2:4:2:1:2:1`"),
                parse_mode="Markdown"
            )
            bot.register_next_step_handler(
                message,
                lambda msg: segregation_gen(msg, result, count + 1, correct_answer)
            )
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
            bot.send_message(
                user_id,
                text=
                    "üéâ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!* üéì\n\n"
                    f"üìä *–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:* `{correct_answer}` *–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ 5.*",
                parse_mode="Markdown"
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            user = User.user_log_in(user_id)
            if correct_answer == 5:
                if User.is_pro_user(user_id):
                    bot.send_message(
                        user_id,
                        "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üèÜ\n\n"
                        "–í—ã —Å–¥–µ–ª–∞–ª–∏ –µ—â—ë –æ–¥–∏–Ω —à–∞–≥ –∫ –∑–≤–∞–Ω–∏—é *–≤–µ–ª–∏–∫–æ–≥–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞-–≥–µ–Ω–µ—Ç–∏–∫–∞*! üß¨üìö\n"
                        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ, –∏ —Å–∫–æ—Ä–æ –ê–ª–µ–∫—Å–µ–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –±—É–¥–µ—Ç –±–æ—è—Ç—å—Å—è –≤–∞—Å! üí•"
                    )
                    User.increase_exam_pass(user_id)
                else:
                    bot.send_message(user_id, text=(
                            "üåü *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!* üéâ\n\n"
                            "–í—ã –Ω–∞–±—Ä–∞–ª–∏ *–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª\\!* üèÜ\n"
                            "–ê —Ç–∞–∫–∂–µ –≤—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—à–ª–∏ —ç–∫–∑–∞–º–µ–Ω –ø–æ *–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–º—É –º–µ—Ç–æ–¥—É*\n"
                            "–∏ —Å—Ç–∞–ª–∏ *–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –º–µ—Ç–æ–¥–æ–ª–æ–≥–æ–º!* üöÄ"),
                        reply_markup=bt.main_menu_bt(user_id),
                        parse_mode="Markdown"
                    )
                    User.activate_pro_status(user_id)
                    User.increase_exam_pass(user_id)
                    bot.send_message(user_id, '–í—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n'
                                              '–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–∑—É: ',
                                     reply_markup=bt.main_menu_bt_pro())
            else:
                bot.send_message(
                    user_id,
                    text=
                        "‚ùå *–≠—Ç–∞–ø –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.* üòû\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑! üîÑ\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã *–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.* ‚¨áÔ∏è",
                    reply_markup=bt.test_buttons(
                        user, ('–†–∞—Å—â–µ–ø–ª–µ–Ω–∏–µ –ø–æ –≥–µ–Ω–æ—Ç–∏–ø—É', 'segregation_gen')
                    ),
                    parse_mode="Markdown"
                )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–≤–æ–¥–∞
    except ValueError:
        bot.send_message(
            user_id,
            text=(
                "‚ùå *–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!* üòû\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ *1:2:1:2:4:2:1:2:1* üî¢"),
            parse_mode="Markdown"
        )
        bot.register_next_step_handler(
            message,
            lambda msg: segregation_gen(msg, result, count, correct_answer)
        )


bot.infinity_polling(timeout=999, long_polling_timeout=5)
